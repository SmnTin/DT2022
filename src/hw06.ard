\import Meta
\import Paths.Meta
\import Utils
\import hw01 (gcd)
\import lect05
\import lect06
\open Nat (+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.

\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (f, s) => \new Pair { | fst_ => s | snd_ => f }

-- При помощи \new и доступа к полям.

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A =>
  \new Pair { | fst_ => p.snd_ | snd_ => p.fst_ }

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p

\func one-isPos : PosNat 1 => \new PosNat { | p => () }

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Coprime
  | n : Nat
  | m : Nat
  | coprime : gcd n m = 1

\func CoprimeWith60 => Coprime 60

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 2 >>= {A B : \Set} : F A -> (A -> F B) -> F B

  | return-left-id {A B : \Set} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | return-right-id {A : \Set} (m : F A) : (m >>= return) = m
  | bind-assoc {A B C : \Set} (m : F A) (k : A -> F B) (k' : B -> F C) :
  ((m >>= k) >>= k') = (m >>= (\lam x => k x >>= k'))

  | fmap f xs => xs >>= (\lam x => return (f x))
  | fmap-id => \lam m => return-right-id _
  | fmap-comp => \lam f g m =>
      sym (bind-assoc _ _ _ *> pmap (>>= m) (funExt' (\lam x => return-left-id (f x) (\lam x => return (g x)))))

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= => \lam m k => \case m \with {
    | just x => k x | nothing => nothing
  }
  | return-left-id a k => idp
  | return-right-id m => \case \elim m \with {
    | just a => idp | nothing => idp
  }
  | bind-assoc m k k' => \case \elim m \with {
    | nothing => idp
    | just a => cases (k a) \with {
      | just b => idp | nothing => idp
    }
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance StateMonad (S : \Set) : Monad (State S)
  | return a => \new State { | state s => (s, a) }
  | >>= {A} {B} (m : State S A) k => \new State S B {
    | state s =>
      \let (s', a) => m.state s \in
        \let m' : State S B => k a \in
          m'.state s'
  }
  | return-left-id a k => idp
  | return-right-id m => idp
  | bind-assoc m k k' => idp

\instance State'Monad (S : \Set) : Monad (State' S)
  | return a => state' (\lam s => (s, a))
  | >>= m k => state' (\lam s =>
      \let (state' m) => m \in
        \let (s', a) => m s \in
          \let (state' m') => k a \in
            m' s'
  )
  | return-left-id {A} {B} (a : A) k =>
    cases (return {\this} a) \with {
      | state' r =>
        cases (k a) \with {
          | state' m' => idp
        }
    }
  | return-right-id m =>
    \case \elim m \with {
      | state' m => idp
    }
  | bind-assoc {A} {B} {C} m k k' =>
    \case \elim m \with {
      | state' m => pmap state' (funExt' (
        \lam s => \let mr => m s \in
          \case (m s) \as mr
          \return (
            \let (s',a) =>
              \let (s',a) => mr
              \in \case k a \return \Sigma S B \with {
                | state' m' => m' s'
              }
            \in \case k' a \with {
              | state' m' => m' s'
            }) = (
                   \let (s',a) => mr
                   \in \case k a \return \Sigma S C \with {
                     | state' m =>
                       \let (s',a) => m s'
                       \in \case k' a \with {
                         | state' m' => m' s'
                       }
                   })
          \with {
            | (s', a) =>
              cases (k a) \with {
                | state' m' =>
                  cases (m' s') \with {
                    | (s'', b) =>
                      cases (k' b) \with {
                        | state' m'' => idp
                      }
                  }
              }
          }
      ))
    }
