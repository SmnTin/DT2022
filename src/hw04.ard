\import Function.Meta ($)
\import Utils
\import lect04 \hiding (J, Vec, nil, sym, v++)
\open Nat (+, *)

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup (n : Nat) {A : \Type} (xs : List A) (H : T (n < length xs)) : A \elim n, xs
  | suc n, :: x xs => lookup n xs H
  | 0, :: x xs => x
  | 0, nil => absurd H
  | suc n, nil => absurd H

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate' {A : \Type} (x : A) (n : Nat) : vec A n \elim n
  | suc n => (x, replicate' x n)
  | 0 => ()

\func replicate'' {A : \Type} (x : A) (n : Nat) : Vec A n \elim n
  | suc n => vcons x (replicate'' x n)
  | 0 => vnil

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map' {A B : \Type} (f : A -> B) {n : Nat} (xs : vec A n) : vec B n \elim n, xs
  | suc n, (x, xs) => (f x, map' f xs)
  | 0, () => ()

\func map'' {A B : \Type} (f : A -> B) {n : Nat} (xs : Vec A n) : Vec B n \elim n, xs
  | suc n, vcons x xs => vcons (f x) (map'' f xs)
  | 0, vnil => vnil

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith' {A B : \Type} {n : Nat} (xs : vec A n) (ys : vec B n) : vec (\Sigma A B) n \elim n, xs, ys
  | suc n, (x, xs), (y, ys) => ((x, y), zipWith' xs ys)
  | 0, (), () => ()

\func zipWith'' {A B : \Type} {n : Nat} (xs : Vec A n) (ys : Vec B n) : Vec (\Sigma A B) n \elim n, xs, ys
  | suc n, vcons x xs, vcons y ys => vcons (x, y) (zipWith'' xs ys)
  | 0, vnil, vnil => vnil

-- 5. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => ctleaf
  | suc n => ctnode A (CTree A n) (CTree A n)

-- 6. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | _ => tleaf
  | suc n => tnode A (Tree A n) (Tree A n)

-- определите функцию, возвращающую высоту дерева.

\func max {n : Nat} (x y : Fin n) : Fin n \elim n, x, y
  | suc n, fzero, fzero => fzero
  | suc n, fzero, fsuc y => fsuc y
  | suc n, fsuc x, fzero => fsuc x
  | suc n, fsuc x, fsuc y => fsuc (max x y)

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, tleaf => fzero
  | suc n, tleaf => fzero
  | suc n, tnode _ l r => fsuc $ max (height l) (height r)

-- Optional task
-- 7. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f fzero) $ coin (\lam x => f (fsuc x))

-- Optional task
-- 8. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Fin n -> Fin m -> A

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => \lam i j => \case i \with {
  }
  | suc n => \let sub => diag z e n \in
    \lam i j => \case i, j \with {
      | fzero, fzero => e
      | fsuc i, fsuc j => sub i j
      | _, _ => z
    }

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n =>
  \lam i j => M j i

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) {n m : Nat} (M N : Mat A n m) : Mat A n m =>
  \lam i j => add (M i j) (N i j)

-- умножение матриц

-- z ─ нейтральный элемент по сложению.

-- foldFin – правая свёртка [fzero, fsuc fzero, fsuc (fsuc fzero), ...]

\func foldFin {A : \Type} (ini : A) {n : Nat} (f : Fin n -> A -> A) : A \elim n
  | 0 => ini
  | suc n => f fzero (foldFin ini (\lam x acc => f (fsuc x) acc))

\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) {n m k : Nat} (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  \lam i j => foldFin z (\lam l sum => add sum (mul (M i l) (N l j)))

-- 9. Определите факториал через Nat-rec.

\func fac (n : Nat) => Nat-rec Nat 1 (\lam k acc => suc k * acc) n

\func fac-rec (n : Nat) : Nat \with
  | 0 => 1
  | suc n => suc n * fac-rec n

\func fac-equiv (n : Nat) : fac n = fac-rec n \with
  | 0 => idp
  | suc n => pmap (* (suc n)) (fac-equiv n)

-- 10. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +-assoc-elim (n m k : Nat) : (n + m) + k = n + (m + k) =>
  Nat-elim (\lam k => (n + m) + k = n + (m + k))
      idp (\lam k' IH => pmap suc IH) k

-- 11. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim
  (P : D -> \Type)
  (c1 : \Pi (n : Nat) -> P (con1 n))
  (c2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
  (c3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
  (d : D) : P d \elim d
  | con1 n => c1 n
  | con2 d1 d2 => c2 d1 d2 (D-elim P c1 c2 c3 d1) (D-elim P c1 c2 c3 d2)
  | con3 f => c3 f (\lam n => D-elim P c1 c2 c3 (f n))

\func D-rec
  (P : \Type)
  (c1 : \Pi (n : Nat) -> P)
  (c2 : \Pi (d1 d2 : D) -> P -> P -> P)
  (c3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P) -> P)
  (d : D) : P \elim d
  | con1 n => c1 n
  | con2 d1 d2 => c2 d1 d2 (D-rec P c1 c2 c3 d1) (D-rec P c1 c2 c3 d2)
  | con3 f => c3 f (\lam n => D-rec P c1 c2 c3 (f n))

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}

-- 12. Определите рекурсор и элиминатор для List.

\func List-elim
  (A : \Type)
  (P : List A -> \Type)
  (z : P nil)
  (s : \Pi (x : A) (xs : List A) -> P xs -> P (x :: xs))
  (xs : List A) : P xs \elim xs
  | nil => z
  | :: x xs => s x xs (List-elim A P z s xs)

\func List-rec
  (A P : \Type)
  (z : P)
  (s : \Pi (x : A) (xs : List A) -> P -> P)
  (xs : List A) : P \elim xs
  | nil => z
  | :: x xs => s x xs (List-rec A P z s xs)

-- 13. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- 14. Докажите pmap2 при помощи паттерн матчинга с idp.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' \elim p, q
  | idp, idp => idp

-- Optional task
-- 15. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p =>
  J (\lam a' p => B a a' p) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  Jalt (\lam a a' _ => B a -> B a') (\lam a b => b) p b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt (\lam a a' p => (a, idp) = {\Sigma (x : A) (a = x)} (a', p)) (\lam _ => idp) p.2

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p =>
  transport'' {\Sigma (x : A) (a = x)} (\lam q => B q.1 q.2) (sigma-contr (a', p)) b

-- Optional task
-- 16. Докажите ассоциативность конкатенации векторов.

\func v++-assoc {A : \Type} {n m k : Nat}
                (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : transport (Vec A) (+-assoc n m k) ((xs v++ ys) v++ zs) = xs v++ (ys v++ zs) => {?}
